// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIGE.Data;

#nullable disable

namespace SIGE.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250909052521_TodasLasTablas")]
    partial class TodasLasTablas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SIGE.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Apellido2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SIGE.Models.ArchivoEvaluacion", b =>
                {
                    b.Property<int>("CodArchivosEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodArchivosEvaluacion"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Evaluacion")
                        .HasColumnType("int");

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NombreOriginal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Profesor")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RutaRelativa")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("TamanoBytes")
                        .HasColumnType("bigint");

                    b.HasKey("CodArchivosEvaluacion");

                    b.HasIndex("Evaluacion");

                    b.HasIndex("Profesor");

                    b.ToTable("ArchivosEvaluacion");
                });

            modelBuilder.Entity("SIGE.Models.Asignacion", b =>
                {
                    b.Property<int>("CodAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodAsignacion"));

                    b.Property<int?>("ArchivoEvaluacion")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaConclusion")
                        .HasColumnType("date");

                    b.Property<int>("Grupo")
                        .HasColumnType("int");

                    b.Property<int>("Materia")
                        .HasColumnType("int");

                    b.Property<int>("NumeroEvaluacion")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoEvaluacion")
                        .HasColumnType("int");

                    b.HasKey("CodAsignacion");

                    b.HasIndex("ArchivoEvaluacion");

                    b.HasIndex("Grupo");

                    b.HasIndex("Materia");

                    b.HasIndex("PeriodoEvaluacion");

                    b.ToTable("Asignaciones");
                });

            modelBuilder.Entity("SIGE.Models.Asistencia", b =>
                {
                    b.Property<int>("CodAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodAsistencia"));

                    b.Property<int>("DiaSemana")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAsistencia")
                        .HasColumnType("date");

                    b.Property<int>("Grupo")
                        .HasColumnType("int");

                    b.HasKey("CodAsistencia");

                    b.HasIndex("DiaSemana");

                    b.HasIndex("Grupo");

                    b.ToTable("Asistencias");
                });

            modelBuilder.Entity("SIGE.Models.AsistenciaEstudiante", b =>
                {
                    b.Property<int>("CodAsistenciaEstudiante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodAsistenciaEstudiante"));

                    b.Property<int>("Asistencia")
                        .HasColumnType("int");

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<int>("Estudiante")
                        .HasColumnType("int");

                    b.HasKey("CodAsistenciaEstudiante");

                    b.HasIndex("Asistencia");

                    b.HasIndex("Estudiante");

                    b.ToTable("AsistenciasEstudiantes");
                });

            modelBuilder.Entity("SIGE.Models.AsistenciaMateria", b =>
                {
                    b.Property<int>("CodAsistenciaMateria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodAsistenciaMateria"));

                    b.Property<int>("AsistenciaEstudiante")
                        .HasColumnType("int");

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<int>("MatPorDiaHorario")
                        .HasColumnType("int");

                    b.HasKey("CodAsistenciaMateria");

                    b.HasIndex("AsistenciaEstudiante");

                    b.HasIndex("MatPorDiaHorario");

                    b.ToTable("AsistenciasMaterias");
                });

            modelBuilder.Entity("SIGE.Models.Aula", b =>
                {
                    b.Property<int>("CodAula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodAula"));

                    b.Property<string>("NomAula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodAula");

                    b.ToTable("Aulas");
                });

            modelBuilder.Entity("SIGE.Models.Calificacion", b =>
                {
                    b.Property<int>("CodCalificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodCalificacion"));

                    b.Property<int>("Asignacion")
                        .HasColumnType("int");

                    b.Property<int>("Estudiante")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCalificacion")
                        .HasColumnType("date");

                    b.Property<int>("Nota")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CodCalificacion");

                    b.HasIndex("Asignacion");

                    b.HasIndex("Estudiante");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("SIGE.Models.DiaHorario", b =>
                {
                    b.Property<int>("CodDiaHorario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodDiaHorario"));

                    b.Property<int>("DiaSemana")
                        .HasColumnType("int");

                    b.Property<int>("Grupo")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("TurnoEscolar")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CodDiaHorario");

                    b.HasIndex("DiaSemana");

                    b.HasIndex("Grupo");

                    b.ToTable("DiasHorarios");
                });

            modelBuilder.Entity("SIGE.Models.DiaSemana", b =>
                {
                    b.Property<int>("CodDiaSemana")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodDiaSemana"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Nomenclatura")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CodDiaSemana");

                    b.ToTable("DiasSemana");
                });

            modelBuilder.Entity("SIGE.Models.Estudiante", b =>
                {
                    b.Property<int>("CodEstudiante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodEstudiante"));

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Apellido2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Grupo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("CodEstudiante");

                    b.HasIndex("Grupo");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("SIGE.Models.Evaluacion", b =>
                {
                    b.Property<int>("CodEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodEvaluacion"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("CodEvaluacion");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("SIGE.Models.Grupo", b =>
                {
                    b.Property<int>("CodGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodGrupo"));

                    b.Property<int>("Aula")
                        .HasColumnType("int");

                    b.Property<int>("AñoLectivo")
                        .HasColumnType("int");

                    b.Property<int>("CapacidadMaxima")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Profesor")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Seccion")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CodGrupo");

                    b.HasIndex("Aula");

                    b.HasIndex("Profesor");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("SIGE.Models.HorarioTiempoLibre", b =>
                {
                    b.Property<int>("CodHorarioTiempoLibre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodHorarioTiempoLibre"));

                    b.Property<int>("DiaHorario")
                        .HasColumnType("int");

                    b.Property<int>("TiempoLibre")
                        .HasColumnType("int");

                    b.HasKey("CodHorarioTiempoLibre");

                    b.HasIndex("DiaHorario");

                    b.HasIndex("TiempoLibre");

                    b.ToTable("HorariosTiemposLibres");
                });

            modelBuilder.Entity("SIGE.Models.HorasMateria", b =>
                {
                    b.Property<int>("CodHorasMateria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodHorasMateria"));

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.HasKey("CodHorasMateria");

                    b.ToTable("HorasMaterias");
                });

            modelBuilder.Entity("SIGE.Models.MatPorDiaHorario", b =>
                {
                    b.Property<int>("CodMatPorDiaHorario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodMatPorDiaHorario"));

                    b.Property<int>("Aula")
                        .HasColumnType("int");

                    b.Property<int>("DiasHorario")
                        .HasColumnType("int");

                    b.Property<int>("HorasMateria")
                        .HasColumnType("int");

                    b.Property<int>("MateriaProfesor")
                        .HasColumnType("int");

                    b.HasKey("CodMatPorDiaHorario");

                    b.HasIndex("Aula");

                    b.HasIndex("DiasHorario");

                    b.HasIndex("HorasMateria");

                    b.HasIndex("MateriaProfesor");

                    b.ToTable("MatsPorDiaHorario");
                });

            modelBuilder.Entity("SIGE.Models.Materia", b =>
                {
                    b.Property<int>("CodMateria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodMateria"));

                    b.Property<string>("NomMateria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodMateria");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("SIGE.Models.MateriaProfesor", b =>
                {
                    b.Property<int>("CodMateriaProfesor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodMateriaProfesor"));

                    b.Property<int?>("Aula")
                        .HasColumnType("int");

                    b.Property<int>("Materia")
                        .HasColumnType("int");

                    b.Property<string>("Profesor")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CodMateriaProfesor");

                    b.HasIndex("Aula");

                    b.HasIndex("Materia");

                    b.HasIndex("Profesor");

                    b.ToTable("MateriasProfesores");
                });

            modelBuilder.Entity("SIGE.Models.Periodo", b =>
                {
                    b.Property<int>("CodPeriodo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodPeriodo"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CodPeriodo");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("SIGE.Models.PeriodoEvaluacion", b =>
                {
                    b.Property<int>("CodPeriodoEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodPeriodoEvaluacion"));

                    b.Property<int>("Evaluacion")
                        .HasColumnType("int");

                    b.Property<int>("Periodo")
                        .HasColumnType("int");

                    b.HasKey("CodPeriodoEvaluacion");

                    b.HasIndex("Evaluacion");

                    b.HasIndex("Periodo");

                    b.ToTable("PeriodosEvaluaciones");
                });

            modelBuilder.Entity("SIGE.Models.TiempoLibre", b =>
                {
                    b.Property<int>("CodTiempoLibre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodTiempoLibre"));

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodTiempoLibre");

                    b.ToTable("TiemposLibres");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SIGE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SIGE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SIGE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SIGE.Models.ArchivoEvaluacion", b =>
                {
                    b.HasOne("SIGE.Models.Evaluacion", "EvaluacionFK")
                        .WithMany()
                        .HasForeignKey("Evaluacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.ApplicationUser", "ProfesorFK")
                        .WithMany()
                        .HasForeignKey("Profesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluacionFK");

                    b.Navigation("ProfesorFK");
                });

            modelBuilder.Entity("SIGE.Models.Asignacion", b =>
                {
                    b.HasOne("SIGE.Models.ArchivoEvaluacion", "ArchivosEvaluacionFk")
                        .WithMany()
                        .HasForeignKey("ArchivoEvaluacion");

                    b.HasOne("SIGE.Models.Grupo", "GrupoFk")
                        .WithMany()
                        .HasForeignKey("Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.Materia", "MateriaFK")
                        .WithMany()
                        .HasForeignKey("Materia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.PeriodoEvaluacion", "PerdioEvaluacionFK")
                        .WithMany()
                        .HasForeignKey("PeriodoEvaluacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchivosEvaluacionFk");

                    b.Navigation("GrupoFk");

                    b.Navigation("MateriaFK");

                    b.Navigation("PerdioEvaluacionFK");
                });

            modelBuilder.Entity("SIGE.Models.Asistencia", b =>
                {
                    b.HasOne("SIGE.Models.DiaSemana", "DiaSemanaFK")
                        .WithMany()
                        .HasForeignKey("DiaSemana")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.Grupo", "GrupoFk")
                        .WithMany()
                        .HasForeignKey("Grupo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiaSemanaFK");

                    b.Navigation("GrupoFk");
                });

            modelBuilder.Entity("SIGE.Models.AsistenciaEstudiante", b =>
                {
                    b.HasOne("SIGE.Models.Asistencia", "AsistenciaFk")
                        .WithMany()
                        .HasForeignKey("Asistencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.Estudiante", "EstudianteFk")
                        .WithMany()
                        .HasForeignKey("Estudiante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsistenciaFk");

                    b.Navigation("EstudianteFk");
                });

            modelBuilder.Entity("SIGE.Models.AsistenciaMateria", b =>
                {
                    b.HasOne("SIGE.Models.AsistenciaEstudiante", "AsistenciaEstudianteFk")
                        .WithMany()
                        .HasForeignKey("AsistenciaEstudiante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.MatPorDiaHorario", "MatPorDiaHorarioFK")
                        .WithMany()
                        .HasForeignKey("MatPorDiaHorario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsistenciaEstudianteFk");

                    b.Navigation("MatPorDiaHorarioFK");
                });

            modelBuilder.Entity("SIGE.Models.Calificacion", b =>
                {
                    b.HasOne("SIGE.Models.Asignacion", "AsignacionFk")
                        .WithMany()
                        .HasForeignKey("Asignacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.Estudiante", "EstudianteFk")
                        .WithMany()
                        .HasForeignKey("Estudiante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsignacionFk");

                    b.Navigation("EstudianteFk");
                });

            modelBuilder.Entity("SIGE.Models.DiaHorario", b =>
                {
                    b.HasOne("SIGE.Models.DiaSemana", "DiaSemanaFK")
                        .WithMany()
                        .HasForeignKey("DiaSemana")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.Grupo", "GrupoFk")
                        .WithMany()
                        .HasForeignKey("Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaSemanaFK");

                    b.Navigation("GrupoFk");
                });

            modelBuilder.Entity("SIGE.Models.Estudiante", b =>
                {
                    b.HasOne("SIGE.Models.Grupo", "GrupoFk")
                        .WithMany()
                        .HasForeignKey("Grupo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrupoFk");
                });

            modelBuilder.Entity("SIGE.Models.Grupo", b =>
                {
                    b.HasOne("SIGE.Models.Aula", "AulaFK")
                        .WithMany()
                        .HasForeignKey("Aula")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIGE.Models.ApplicationUser", "ProfesorFK")
                        .WithMany()
                        .HasForeignKey("Profesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AulaFK");

                    b.Navigation("ProfesorFK");
                });

            modelBuilder.Entity("SIGE.Models.HorarioTiempoLibre", b =>
                {
                    b.HasOne("SIGE.Models.DiaHorario", "DiaHorarioFK")
                        .WithMany()
                        .HasForeignKey("DiaHorario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.TiempoLibre", "TiempoLibreFK")
                        .WithMany()
                        .HasForeignKey("TiempoLibre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaHorarioFK");

                    b.Navigation("TiempoLibreFK");
                });

            modelBuilder.Entity("SIGE.Models.MatPorDiaHorario", b =>
                {
                    b.HasOne("SIGE.Models.Aula", "AulaFK")
                        .WithMany()
                        .HasForeignKey("Aula")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIGE.Models.DiaHorario", "DiasHorarioFK")
                        .WithMany()
                        .HasForeignKey("DiasHorario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIGE.Models.HorasMateria", "HorasMateriaFK")
                        .WithMany()
                        .HasForeignKey("HorasMateria")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIGE.Models.MateriaProfesor", "MateriaProfesorFK")
                        .WithMany()
                        .HasForeignKey("MateriaProfesor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AulaFK");

                    b.Navigation("DiasHorarioFK");

                    b.Navigation("HorasMateriaFK");

                    b.Navigation("MateriaProfesorFK");
                });

            modelBuilder.Entity("SIGE.Models.MateriaProfesor", b =>
                {
                    b.HasOne("SIGE.Models.Aula", "AulaFK")
                        .WithMany()
                        .HasForeignKey("Aula");

                    b.HasOne("SIGE.Models.Materia", "MateriaFK")
                        .WithMany()
                        .HasForeignKey("Materia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.ApplicationUser", "ProfesorFK")
                        .WithMany()
                        .HasForeignKey("Profesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AulaFK");

                    b.Navigation("MateriaFK");

                    b.Navigation("ProfesorFK");
                });

            modelBuilder.Entity("SIGE.Models.PeriodoEvaluacion", b =>
                {
                    b.HasOne("SIGE.Models.Evaluacion", "EvaluacionFK")
                        .WithMany()
                        .HasForeignKey("Evaluacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIGE.Models.Periodo", "PeriodoFK")
                        .WithMany()
                        .HasForeignKey("Periodo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluacionFK");

                    b.Navigation("PeriodoFK");
                });
#pragma warning restore 612, 618
        }
    }
}
